
AudioPlay.elf:     file format elf32-littlenios2
AudioPlay.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000a3c memsz 0x00000a3c flags r-x
    LOAD off    0x00001a5c vaddr 0x00002a5c paddr 0x00002b30 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags rw-
    LOAD off    0x00001c04 vaddr 0x00002c04 paddr 0x00002c04 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00001b30  2**0
                  CONTENTS
  2 .text         00000928  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000114  00002948  00002948  00001948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000d4  00002a5c  00002b30  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00002c04  00002c04  00001c04  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00002c14  00002c14  00001b30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  00001b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002a58  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001017  00000000  00000000  00004828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001130  00000000  00000000  0000583f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000440  00000000  00000000  00006970  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d6a  00000000  00000000  00006db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b5f  00000000  00000000  00007b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000867c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  000086b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009b0e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00009b11  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00009b16  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00009b17  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00009b18  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00009b23  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00009b2e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00009b39  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  00009b42  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c13  00000000  00000000  00009b87  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002c0eac  00000000  00000000  0000e79a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
00002948 l    d  .rodata	00000000 .rodata
00002a5c l    d  .rwdata	00000000 .rwdata
00002c04 l    d  .bss	00000000 .bss
00002c14 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AudioPlay_bsp//obj/HAL/src/crt0.o
00002068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002a8c l     O .rwdata	00000030 audio_and_video_config_0
00002a5c l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000027c8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
0000226c g     F .text	0000002c alt_main
00002b30 g       *ABS*	00000000 __flash_rwdata_start
0000258c g     F .text	00000020 alt_up_audio_read_fifo_avail
00002618 g     F .text	00000024 alt_up_audio_record_r
00002568 g     F .text	00000024 alt_up_audio_reset_audio_core
000028bc g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000001c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002c10 g     O .bss	00000004 errno
00002554 g     F .text	00000014 alt_up_audio_write_interrupt_pending
00002c08 g     O .bss	00000004 alt_argv
0000ab14 g       *ABS*	00000000 _gp
00002abc g     O .rwdata	00000030 alt_fd_list
0000283c g     F .text	00000074 alt_find_dev
00002780 g     F .text	00000018 alt_up_audio_read_fifo_head
000028c4 g     F .text	00000038 alt_icache_flush
00002b18 g     O .rwdata	00000004 alt_max_fd
00002798 g     F .text	00000018 alt_up_audio_write_fifo_head
00002c14 g       *ABS*	00000000 __bss_end
000024e0 g     F .text	00000008 alt_up_audio_open_dev
000026f4 g     F .text	00000068 alt_up_audio_play_r
00002aec g     O .rwdata	00000028 alt_dev_null
000027b0 g     F .text	00000018 alt_dcache_flush_all
00002b30 g       *ABS*	00000000 __ram_rwdata_end
00002b1c g     O .rwdata	00000008 alt_dev_list
00002a5c g       *ABS*	00000000 __ram_rodata_end
00002b14 g     O .rwdata	00000004 jtag_uart_0
00002c14 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
000024ac g     F .text	00000034 altera_avalon_jtag_uart_write
00002298 g     F .text	00000170 alt_printf
00002020 g     F .text	0000004c _start
000026a4 g     F .text	00000050 alt_up_audio_write_fifo
00002470 g     F .text	0000003c alt_sys_init
000025cc g     F .text	0000004c alt_up_audio_read_fifo
00002528 g     F .text	00000018 alt_up_audio_disable_write_interrupt
00002a5c g       *ABS*	00000000 __ram_rwdata_start
00002948 g       *ABS*	00000000 __ram_rodata_start
00002514 g     F .text	00000014 alt_up_audio_enable_write_interrupt
000028fc g     F .text	00000030 memcmp
00002c14 g       *ABS*	00000000 __alt_stack_base
000024fc g     F .text	00000018 alt_up_audio_disable_read_interrupt
000027d0 g     F .text	0000006c alt_dev_llist_insert
00002c04 g       *ABS*	00000000 __bss_start
0000206c g     F .text	00000120 main
00002000 g       *ABS*	00000000 __alt_mem_RAM
000025ac g     F .text	00000020 alt_up_audio_write_fifo_space
00002c04 g     O .bss	00000004 alt_envp
00002b2c g     O .rwdata	00000004 alt_errno
00002948 g       *ABS*	00000000 __flash_rodata_start
00002450 g     F .text	00000020 alt_irq_init
00002c0c g     O .bss	00000004 alt_argc
00002b24 g     O .rwdata	00000008 alt_fs_list
0000263c g     F .text	00000068 alt_up_audio_record_l
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002b30 g       *ABS*	00000000 _edata
00002c14 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
0000275c g     F .text	00000024 alt_up_audio_play_l
00004000 g       *ABS*	00000000 __alt_data_end
0000201c g       .entry	00000000 _exit
0000292c g     F .text	0000001c strlen
00002408 g     F .text	00000048 alt_putchar
000028b0 g     F .text	0000000c alt_icache_flush_all
0000218c g     F .text	000000e0 alt_load
000024e8 g     F .text	00000014 alt_up_audio_enable_read_interrupt
00002540 g     F .text	00000014 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00002000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    2000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    2004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    2008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    200c:	00bffd16 	blt	zero,r2,2004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2014:	08480814 	ori	at,at,8224
    jmp r1
    2018:	0800683a 	jmp	at

0000201c <_exit>:
    201c:	00000000 	call	0 <__alt_mem_RAM-0x2000>

Disassembly of section .text:

00002020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    2020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    2024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    2028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    202c:	00bffd16 	blt	zero,r2,2024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2034:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    203c:	d6aac514 	ori	gp,gp,43796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2044:	108b0114 	ori	r2,r2,11268

    movhi r3, %hi(__bss_end)
    2048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    204c:	18cb0514 	ori	r3,r3,11284

    beq r2, r3, 1f
    2050:	10c00326 	beq	r2,r3,2060 <_start+0x40>

0:
    stw zero, (r2)
    2054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    205c:	10fffd36 	bltu	r2,r3,2054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2060:	000218c0 	call	218c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2064:	000226c0 	call	226c <alt_main>

00002068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2068:	003fff06 	br	2068 <alt_after_alt_main>

0000206c <main>:
    const int CYCLE_STEPS = (2 * AMPLITUDE) / STEP;  // (30000 - (-30000)) / 600 = 100
    unsigned int sample_buf[1];
    int cycle_count = 0;

    // 1) Abrir el dispositivo de audio "/dev/audio_0"
    audio_dev = alt_up_audio_open_dev("/dev/audio_0");
    206c:	01000034 	movhi	r4,0
#include "altera_up_avalon_audio_and_video_config.h"
#include "sys/alt_stdio.h"
#include "unistd.h"   // para usleep()

int main()
{
    2070:	defffa04 	addi	sp,sp,-24
    const int CYCLE_STEPS = (2 * AMPLITUDE) / STEP;  // (30000 - (-30000)) / 600 = 100
    unsigned int sample_buf[1];
    int cycle_count = 0;

    // 1) Abrir el dispositivo de audio "/dev/audio_0"
    audio_dev = alt_up_audio_open_dev("/dev/audio_0");
    2074:	210a5204 	addi	r4,r4,10568
#include "altera_up_avalon_audio_and_video_config.h"
#include "sys/alt_stdio.h"
#include "unistd.h"   // para usleep()

int main()
{
    2078:	dfc00515 	stw	ra,20(sp)
    207c:	dcc00415 	stw	r19,16(sp)
    2080:	dc800315 	stw	r18,12(sp)
    2084:	dc400215 	stw	r17,8(sp)
    2088:	dc000115 	stw	r16,4(sp)
    const int CYCLE_STEPS = (2 * AMPLITUDE) / STEP;  // (30000 - (-30000)) / 600 = 100
    unsigned int sample_buf[1];
    int cycle_count = 0;

    // 1) Abrir el dispositivo de audio "/dev/audio_0"
    audio_dev = alt_up_audio_open_dev("/dev/audio_0");
    208c:	00024e00 	call	24e0 <alt_up_audio_open_dev>
    if (audio_dev == NULL) {
    2090:	10003326 	beq	r2,zero,2160 <main+0xf4>
        alt_printf("Error: no se encontro /dev/audio_0\n");
        return -1;
    }
    alt_printf("Dispositivo audio_0 abierto.\n");
    2094:	01000034 	movhi	r4,0
    2098:	210a5f04 	addi	r4,r4,10620
    209c:	1023883a 	mov	r17,r2
    20a0:	00022980 	call	2298 <alt_printf>

    // 2) Resetear el core de audio para inicializar el CODEC WM8731
    alt_up_audio_reset_audio_core(audio_dev);
    20a4:	8809883a 	mov	r4,r17
    20a8:	00025680 	call	2568 <alt_up_audio_reset_audio_core>
    alt_printf("Audio core reiniciado.\n");
    20ac:	01000034 	movhi	r4,0
    20b0:	210a6704 	addi	r4,r4,10652
    20b4:	00022980 	call	2298 <alt_printf>
    alt_printf("Generando onda sierra (amplitud = %d, pasos por ciclo = %d)...\n",
    20b8:	01400074 	movhi	r5,1
    20bc:	01000034 	movhi	r4,0
    20c0:	0180c804 	movi	r6,800
    20c4:	294e2004 	addi	r5,r5,14464
    20c8:	210a6d04 	addi	r4,r4,10676
               AMPLITUDE, CYCLE_STEPS);

    // 3) Inicializar fase en -AMPLITUDE
    phase = -AMPLITUDE;
    20cc:	043ffff4 	movhi	r16,65535
            cycle_count = 0;
        }

        // 4.5) Incrementar fase y reiniciar si supera el maximo
        phase += STEP;
        if (phase > AMPLITUDE) {
    20d0:	04c00074 	movhi	r19,1
    alt_printf("Dispositivo audio_0 abierto.\n");

    // 2) Resetear el core de audio para inicializar el CODEC WM8731
    alt_up_audio_reset_audio_core(audio_dev);
    alt_printf("Audio core reiniciado.\n");
    alt_printf("Generando onda sierra (amplitud = %d, pasos por ciclo = %d)...\n",
    20d4:	00022980 	call	2298 <alt_printf>
    int phase;
    const int AMPLITUDE   = 80000;
    const int STEP        = 200;
    const int CYCLE_STEPS = (2 * AMPLITUDE) / STEP;  // (30000 - (-30000)) / 600 = 100
    unsigned int sample_buf[1];
    int cycle_count = 0;
    20d8:	0025883a 	mov	r18,zero
    alt_printf("Audio core reiniciado.\n");
    alt_printf("Generando onda sierra (amplitud = %d, pasos por ciclo = %d)...\n",
               AMPLITUDE, CYCLE_STEPS);

    // 3) Inicializar fase en -AMPLITUDE
    phase = -AMPLITUDE;
    20dc:	8431e004 	addi	r16,r16,-14464
            cycle_count = 0;
        }

        // 4.5) Incrementar fase y reiniciar si supera el maximo
        phase += STEP;
        if (phase > AMPLITUDE) {
    20e0:	9cce2004 	addi	r19,r19,14464

    // 4) Loop infinito: generar la onda y escribir al FIFO a ritmo de 48 kHz
    while (1)
    {
        // 4.1) Esperar hasta que haya espacio en el FIFO de transmision (canal izquierdo)
        while (alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_LEFT) == 0) {
    20e4:	000b883a 	mov	r5,zero
    20e8:	8809883a 	mov	r4,r17
    20ec:	00025ac0 	call	25ac <alt_up_audio_write_fifo_space>
    20f0:	103ffc26 	beq	r2,zero,20e4 <main+0x78>
            ; // espera activa
        }

        // 4.2) Preparar la muestra en el buffer (unsigned int de 16 bits)
        //      El CODEC acepta 16 bits con signo; truncamos phase
        sample_buf[0] = (unsigned int)(phase & 0xFFFF);
    20f4:	80bfffcc 	andi	r2,r16,65535

        // 4.3) Escribir la misma muestra en FIFO izquierdo y derecho
        alt_up_audio_write_fifo(audio_dev, sample_buf, 1, ALT_UP_AUDIO_LEFT);
    20f8:	000f883a 	mov	r7,zero
    20fc:	01800044 	movi	r6,1
    2100:	d80b883a 	mov	r5,sp
    2104:	8809883a 	mov	r4,r17
            ; // espera activa
        }

        // 4.2) Preparar la muestra en el buffer (unsigned int de 16 bits)
        //      El CODEC acepta 16 bits con signo; truncamos phase
        sample_buf[0] = (unsigned int)(phase & 0xFFFF);
    2108:	d8800015 	stw	r2,0(sp)

        // 4.3) Escribir la misma muestra en FIFO izquierdo y derecho
        alt_up_audio_write_fifo(audio_dev, sample_buf, 1, ALT_UP_AUDIO_LEFT);
    210c:	00026a40 	call	26a4 <alt_up_audio_write_fifo>
        alt_up_audio_write_fifo(audio_dev, sample_buf, 1, ALT_UP_AUDIO_RIGHT);
    2110:	01c00044 	movi	r7,1
    2114:	380d883a 	mov	r6,r7
    2118:	d80b883a 	mov	r5,sp
    211c:	8809883a 	mov	r4,r17
    2120:	00026a40 	call	26a4 <alt_up_audio_write_fifo>

        // 4.4) Incrementar contador de pasos en el ciclo
        cycle_count++;
    2124:	94800044 	addi	r18,r18,1
        if (cycle_count >= CYCLE_STEPS) {
    2128:	0080c7c4 	movi	r2,799
    212c:	1480070e 	bge	r2,r18,214c <main+0xe0>
            // Debug: ciclo completo
            alt_printf("DEBUG: complete_cycle: phase llego a %d, reiniciando a %d\n",
    2130:	01bffff4 	movhi	r6,65535
    2134:	01000034 	movhi	r4,0
    2138:	31b1e004 	addi	r6,r6,-14464
    213c:	800b883a 	mov	r5,r16
    2140:	210a7d04 	addi	r4,r4,10740
    2144:	00022980 	call	2298 <alt_printf>
                       phase, -AMPLITUDE);
            cycle_count = 0;
    2148:	0025883a 	mov	r18,zero
        }

        // 4.5) Incrementar fase y reiniciar si supera el maximo
        phase += STEP;
    214c:	84003204 	addi	r16,r16,200
        if (phase > AMPLITUDE) {
    2150:	9c3fe40e 	bge	r19,r16,20e4 <main+0x78>
            phase = -AMPLITUDE;
    2154:	043ffff4 	movhi	r16,65535
    2158:	8431e004 	addi	r16,r16,-14464
    215c:	003fe106 	br	20e4 <main+0x78>
    int cycle_count = 0;

    // 1) Abrir el dispositivo de audio "/dev/audio_0"
    audio_dev = alt_up_audio_open_dev("/dev/audio_0");
    if (audio_dev == NULL) {
        alt_printf("Error: no se encontro /dev/audio_0\n");
    2160:	01000034 	movhi	r4,0
    2164:	210a5604 	addi	r4,r4,10584
    2168:	00022980 	call	2298 <alt_printf>
        //      si se omite, el loop corre a 48kHz real (recomendado para audio real)
        // usleep(1);
    }

    return 0;
}
    216c:	00bfffc4 	movi	r2,-1
    2170:	dfc00517 	ldw	ra,20(sp)
    2174:	dcc00417 	ldw	r19,16(sp)
    2178:	dc800317 	ldw	r18,12(sp)
    217c:	dc400217 	ldw	r17,8(sp)
    2180:	dc000117 	ldw	r16,4(sp)
    2184:	dec00604 	addi	sp,sp,24
    2188:	f800283a 	ret

0000218c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    218c:	deffff04 	addi	sp,sp,-4
    2190:	01000034 	movhi	r4,0
    2194:	01400034 	movhi	r5,0
    2198:	dfc00015 	stw	ra,0(sp)
    219c:	210a9704 	addi	r4,r4,10844
    21a0:	294acc04 	addi	r5,r5,11056

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    21a4:	2140061e 	bne	r4,r5,21c0 <alt_load+0x34>
    21a8:	01000034 	movhi	r4,0
    21ac:	01400034 	movhi	r5,0
    21b0:	21080804 	addi	r4,r4,8224
    21b4:	29480804 	addi	r5,r5,8224
    21b8:	2140121e 	bne	r4,r5,2204 <alt_load+0x78>
    21bc:	00000b06 	br	21ec <alt_load+0x60>
    21c0:	00c00034 	movhi	r3,0
    21c4:	18cacc04 	addi	r3,r3,11056
    21c8:	1907c83a 	sub	r3,r3,r4
    21cc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    21d0:	10fff526 	beq	r2,r3,21a8 <alt_load+0x1c>
    {
      *to++ = *from++;
    21d4:	114f883a 	add	r7,r2,r5
    21d8:	39c00017 	ldw	r7,0(r7)
    21dc:	110d883a 	add	r6,r2,r4
    21e0:	10800104 	addi	r2,r2,4
    21e4:	31c00015 	stw	r7,0(r6)
    21e8:	003ff906 	br	21d0 <alt_load+0x44>
    21ec:	01000034 	movhi	r4,0
    21f0:	01400034 	movhi	r5,0
    21f4:	210a5204 	addi	r4,r4,10568
    21f8:	294a5204 	addi	r5,r5,10568

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    21fc:	2140101e 	bne	r4,r5,2240 <alt_load+0xb4>
    2200:	00000b06 	br	2230 <alt_load+0xa4>
    2204:	00c00034 	movhi	r3,0
    2208:	18c80804 	addi	r3,r3,8224
    220c:	1907c83a 	sub	r3,r3,r4
    2210:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2214:	10fff526 	beq	r2,r3,21ec <alt_load+0x60>
    {
      *to++ = *from++;
    2218:	114f883a 	add	r7,r2,r5
    221c:	39c00017 	ldw	r7,0(r7)
    2220:	110d883a 	add	r6,r2,r4
    2224:	10800104 	addi	r2,r2,4
    2228:	31c00015 	stw	r7,0(r6)
    222c:	003ff906 	br	2214 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2230:	00027b00 	call	27b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2234:	dfc00017 	ldw	ra,0(sp)
    2238:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    223c:	00028b01 	jmpi	28b0 <alt_icache_flush_all>
    2240:	00c00034 	movhi	r3,0
    2244:	18ca9704 	addi	r3,r3,10844
    2248:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    224c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2250:	18bff726 	beq	r3,r2,2230 <alt_load+0xa4>
    {
      *to++ = *from++;
    2254:	114f883a 	add	r7,r2,r5
    2258:	39c00017 	ldw	r7,0(r7)
    225c:	110d883a 	add	r6,r2,r4
    2260:	10800104 	addi	r2,r2,4
    2264:	31c00015 	stw	r7,0(r6)
    2268:	003ff906 	br	2250 <alt_load+0xc4>

0000226c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    226c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2270:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2274:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2278:	00024500 	call	2450 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    227c:	00024700 	call	2470 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2280:	d1a03c17 	ldw	r6,-32528(gp)
    2284:	d1603d17 	ldw	r5,-32524(gp)
    2288:	d1203e17 	ldw	r4,-32520(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    228c:	dfc00017 	ldw	ra,0(sp)
    2290:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2294:	000206c1 	jmpi	206c <main>

00002298 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2298:	defff204 	addi	sp,sp,-56
    229c:	2005883a 	mov	r2,r4
    22a0:	dfc00a15 	stw	ra,40(sp)
    22a4:	df000915 	stw	fp,36(sp)
    22a8:	ddc00815 	stw	r23,32(sp)
    22ac:	dd800715 	stw	r22,28(sp)
    22b0:	dd400615 	stw	r21,24(sp)
    22b4:	dd000515 	stw	r20,20(sp)
    22b8:	dcc00415 	stw	r19,16(sp)
    22bc:	dc800315 	stw	r18,12(sp)
    22c0:	dc400215 	stw	r17,8(sp)
    22c4:	dc000115 	stw	r16,4(sp)
    22c8:	d9400b15 	stw	r5,44(sp)
    22cc:	d9800c15 	stw	r6,48(sp)
    22d0:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    22d4:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    22d8:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    22dc:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    22e0:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    22e4:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    22e8:	11000007 	ldb	r4,0(r2)
    22ec:	20003a26 	beq	r4,zero,23d8 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    22f0:	24000226 	beq	r4,r16,22fc <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    22f4:	14400044 	addi	r17,r2,1
    22f8:	00001406 	br	234c <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    22fc:	14400084 	addi	r17,r2,2
    2300:	10800047 	ldb	r2,1(r2)
    2304:	10003426 	beq	r2,zero,23d8 <alt_printf+0x140>
            {
                if (c == '%')
    2308:	1400021e 	bne	r2,r16,2314 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    230c:	8009883a 	mov	r4,r16
    2310:	00000e06 	br	234c <alt_printf+0xb4>
                } 
                else if (c == 'c')
    2314:	1480051e 	bne	r2,r18,232c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    2318:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    231c:	ad800104 	addi	r22,r21,4
    2320:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    2324:	00024080 	call	2408 <alt_putchar>
    2328:	00002906 	br	23d0 <alt_printf+0x138>
                }
                else if (c == 'x')
    232c:	14c0201e 	bne	r2,r19,23b0 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    2330:	adc00017 	ldw	r23,0(r21)
    2334:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    2338:	b8000326 	beq	r23,zero,2348 <alt_printf+0xb0>
    233c:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2340:	00c003c4 	movi	r3,15
    2344:	00000306 	br	2354 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    2348:	01000c04 	movi	r4,48
    234c:	00024080 	call	2408 <alt_putchar>
                        continue;
    2350:	00001f06 	br	23d0 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2354:	1d84983a 	sll	r2,r3,r22
    2358:	15c4703a 	and	r2,r2,r23
    235c:	1000021e 	bne	r2,zero,2368 <alt_printf+0xd0>
                        digit_shift -= 4;
    2360:	b5bfff04 	addi	r22,r22,-4
    2364:	003ffb06 	br	2354 <alt_printf+0xbc>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2368:	070003c4 	movi	fp,15
                        if (digit <= 9)
    236c:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2370:	b0001716 	blt	r22,zero,23d0 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2374:	e588983a 	sll	r4,fp,r22
    2378:	25c8703a 	and	r4,r4,r23
    237c:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    2380:	19000236 	bltu	r3,r4,238c <alt_printf+0xf4>
                            c = '0' + digit;
    2384:	21000c04 	addi	r4,r4,48
    2388:	00000106 	br	2390 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    238c:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    2390:	21003fcc 	andi	r4,r4,255
    2394:	2100201c 	xori	r4,r4,128
    2398:	213fe004 	addi	r4,r4,-128
    239c:	d8c00015 	stw	r3,0(sp)
    23a0:	00024080 	call	2408 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    23a4:	b5bfff04 	addi	r22,r22,-4
    23a8:	d8c00017 	ldw	r3,0(sp)
    23ac:	003ff006 	br	2370 <alt_printf+0xd8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    23b0:	1500071e 	bne	r2,r20,23d0 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    23b4:	ad800017 	ldw	r22,0(r21)
    23b8:	ad400104 	addi	r21,r21,4

                    while(*s)
    23bc:	b1000007 	ldb	r4,0(r22)
    23c0:	20000326 	beq	r4,zero,23d0 <alt_printf+0x138>
                      alt_putchar(*s++);
    23c4:	b5800044 	addi	r22,r22,1
    23c8:	00024080 	call	2408 <alt_putchar>
    23cc:	003ffb06 	br	23bc <alt_printf+0x124>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    23d0:	8805883a 	mov	r2,r17
    23d4:	003fc406 	br	22e8 <alt_printf+0x50>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    23d8:	dfc00a17 	ldw	ra,40(sp)
    23dc:	df000917 	ldw	fp,36(sp)
    23e0:	ddc00817 	ldw	r23,32(sp)
    23e4:	dd800717 	ldw	r22,28(sp)
    23e8:	dd400617 	ldw	r21,24(sp)
    23ec:	dd000517 	ldw	r20,20(sp)
    23f0:	dcc00417 	ldw	r19,16(sp)
    23f4:	dc800317 	ldw	r18,12(sp)
    23f8:	dc400217 	ldw	r17,8(sp)
    23fc:	dc000117 	ldw	r16,4(sp)
    2400:	dec00e04 	addi	sp,sp,56
    2404:	f800283a 	ret

00002408 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2408:	defffd04 	addi	sp,sp,-12
    240c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2410:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2414:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2418:	01000034 	movhi	r4,0
    241c:	000f883a 	mov	r7,zero
    2420:	01800044 	movi	r6,1
    2424:	d80b883a 	mov	r5,sp
    2428:	210ac504 	addi	r4,r4,11028
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    242c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2430:	00024ac0 	call	24ac <altera_avalon_jtag_uart_write>
    2434:	00ffffc4 	movi	r3,-1
    2438:	10c00126 	beq	r2,r3,2440 <alt_putchar+0x38>
        return -1;
    }
    return c;
    243c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    2440:	dfc00217 	ldw	ra,8(sp)
    2444:	dc000117 	ldw	r16,4(sp)
    2448:	dec00304 	addi	sp,sp,12
    244c:	f800283a 	ret

00002450 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2450:	deffff04 	addi	sp,sp,-4
    2454:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCE, proce);
    2458:	00028bc0 	call	28bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    245c:	00800044 	movi	r2,1
    2460:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2464:	dfc00017 	ldw	ra,0(sp)
    2468:	dec00104 	addi	sp,sp,4
    246c:	f800283a 	ret

00002470 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2470:	defffe04 	addi	sp,sp,-8
    2474:	dc000015 	stw	r16,0(sp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    2478:	01000034 	movhi	r4,0
    247c:	d4200204 	addi	r16,gp,-32760
    2480:	800b883a 	mov	r5,r16
    2484:	210aa304 	addi	r4,r4,10892
    2488:	dfc00115 	stw	ra,4(sp)
    248c:	00027d00 	call	27d0 <alt_dev_llist_insert>
    2490:	01000034 	movhi	r4,0
    2494:	800b883a 	mov	r5,r16
    2498:	210a9704 	addi	r4,r4,10844
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
}
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	dc000017 	ldw	r16,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	00027d01 	jmpi	27d0 <alt_dev_llist_insert>

000024ac <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    24ac:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    24b0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    24b4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    24b8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    24bc:	2980072e 	bgeu	r5,r6,24dc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    24c0:	38c00037 	ldwio	r3,0(r7)
    24c4:	18ffffec 	andhi	r3,r3,65535
    24c8:	183ffc26 	beq	r3,zero,24bc <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    24cc:	28c00007 	ldb	r3,0(r5)
    24d0:	20c00035 	stwio	r3,0(r4)
    24d4:	29400044 	addi	r5,r5,1
    24d8:	003ff806 	br	24bc <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    24dc:	f800283a 	ret

000024e0 <alt_up_audio_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    24e0:	d1600204 	addi	r5,gp,-32760
    24e4:	000283c1 	jmpi	283c <alt_find_dev>

000024e8 <alt_up_audio_enable_read_interrupt>:
}

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    24e8:	20c00a17 	ldw	r3,40(r4)
    24ec:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    24f0:	10800054 	ori	r2,r2,1
    24f4:	18800035 	stwio	r2,0(r3)
    24f8:	f800283a 	ret

000024fc <alt_up_audio_disable_read_interrupt>:
}

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    24fc:	20c00a17 	ldw	r3,40(r4)
    2500:	19000037 	ldwio	r4,0(r3)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    2504:	00bfff84 	movi	r2,-2
    2508:	2084703a 	and	r2,r4,r2
    250c:	18800035 	stwio	r2,0(r3)
    2510:	f800283a 	ret

00002514 <alt_up_audio_enable_write_interrupt>:
}

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2514:	20c00a17 	ldw	r3,40(r4)
    2518:	18800037 	ldwio	r2,0(r3)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    251c:	10800094 	ori	r2,r2,2
    2520:	18800035 	stwio	r2,0(r3)
    2524:	f800283a 	ret

00002528 <alt_up_audio_disable_write_interrupt>:
}

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2528:	20c00a17 	ldw	r3,40(r4)
    252c:	19000037 	ldwio	r4,0(r3)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    2530:	00bfff44 	movi	r2,-3
    2534:	2084703a 	and	r2,r4,r2
    2538:	18800035 	stwio	r2,0(r3)
    253c:	f800283a 	ret

00002540 <alt_up_audio_read_interrupt_pending>:
}

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2540:	20800a17 	ldw	r2,40(r4)
    2544:	10800037 	ldwio	r2,0(r2)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    2548:	1004d23a 	srli	r2,r2,8
}
    254c:	1080004c 	andi	r2,r2,1
    2550:	f800283a 	ret

00002554 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2554:	20800a17 	ldw	r2,40(r4)
    2558:	10800037 	ldwio	r2,0(r2)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    255c:	1004d27a 	srli	r2,r2,9
}
    2560:	1080004c 	andi	r2,r2,1
    2564:	f800283a 	ret

00002568 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2568:	20800a17 	ldw	r2,40(r4)
    256c:	10c00037 	ldwio	r3,0(r2)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    2570:	19400314 	ori	r5,r3,12
    2574:	11400035 	stwio	r5,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    2578:	00bffcc4 	movi	r2,-13
    257c:	1884703a 	and	r2,r3,r2
    2580:	20c00a17 	ldw	r3,40(r4)
    2584:	18800035 	stwio	r2,0(r3)
    2588:	f800283a 	ret

0000258c <alt_up_audio_read_fifo_avail>:
/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    258c:	20800a17 	ldw	r2,40(r4)
    2590:	10800137 	ldwio	r2,4(r2)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
    2594:	2800031e 	bne	r5,zero,25a4 <alt_up_audio_read_fifo_avail+0x18>
    2598:	10bfc00c 	andi	r2,r2,65280
    259c:	1004d23a 	srli	r2,r2,8
    25a0:	f800283a 	ret
    25a4:	10803fcc 	andi	r2,r2,255
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
}
    25a8:	f800283a 	ret

000025ac <alt_up_audio_write_fifo_space>:
/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    25ac:	20800a17 	ldw	r2,40(r4)
    25b0:	10800137 	ldwio	r2,4(r2)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
    25b4:	2800021e 	bne	r5,zero,25c0 <alt_up_audio_write_fifo_space+0x14>
    25b8:	1004d63a 	srli	r2,r2,24
    25bc:	f800283a 	ret
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
    25c0:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
    25c4:	1004d43a 	srli	r2,r2,16
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
}
    25c8:	f800283a 	ret

000025cc <alt_up_audio_read_fifo>:
}

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
    25cc:	0005883a 	mov	r2,zero
	while ( count < len ) 
    25d0:	1180090e 	bge	r2,r6,25f8 <alt_up_audio_read_fifo+0x2c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    25d4:	22000a17 	ldw	r8,40(r4)
    25d8:	40c00137 	ldwio	r3,4(r8)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
    25dc:	3800031e 	bne	r7,zero,25ec <alt_up_audio_read_fifo+0x20>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
    25e0:	18ffc00c 	andi	r3,r3,65280
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    25e4:	1800051e 	bne	r3,zero,25fc <alt_up_audio_read_fifo+0x30>
    25e8:	f800283a 	ret
    25ec:	18c03fcc 	andi	r3,r3,255
    25f0:	1800071e 	bne	r3,zero,2610 <alt_up_audio_read_fifo+0x44>
    25f4:	f800283a 	ret
    25f8:	f800283a 	ret
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    25fc:	40c00237 	ldwio	r3,8(r8)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    2600:	28c00015 	stw	r3,0(r5)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    2604:	10800044 	addi	r2,r2,1
    2608:	29400104 	addi	r5,r5,4
    260c:	003ff006 	br	25d0 <alt_up_audio_read_fifo+0x4>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
    2610:	40c00337 	ldwio	r3,12(r8)
    2614:	003ffa06 	br	2600 <alt_up_audio_read_fifo+0x34>

00002618 <alt_up_audio_record_r>:
/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    2618:	20800a17 	ldw	r2,40(r4)
    261c:	10800137 	ldwio	r2,4(r2)
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
	if (data_words <= BUF_THRESHOLD)
    2620:	00c01804 	movi	r3,96
    2624:	10803fcc 	andi	r2,r2,255
    2628:	1880022e 	bgeu	r3,r2,2634 <alt_up_audio_record_r+0x1c>
		return 0;
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    262c:	01c00044 	movi	r7,1
    2630:	00025cc1 	jmpi	25cc <alt_up_audio_read_fifo>
}
    2634:	0005883a 	mov	r2,zero
    2638:	f800283a 	ret

0000263c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    263c:	defffc04 	addi	sp,sp,-16
    2640:	dc400215 	stw	r17,8(sp)
    2644:	2823883a 	mov	r17,r5
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    2648:	000b883a 	mov	r5,zero
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    264c:	dc000115 	stw	r16,4(sp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    2650:	d9800015 	stw	r6,0(sp)
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    2654:	dfc00315 	stw	ra,12(sp)
    2658:	2021883a 	mov	r16,r4
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    265c:	000258c0 	call	258c <alt_up_audio_read_fifo_avail>
	if (data_words <= BUF_THRESHOLD)
    2660:	00c01804 	movi	r3,96
    2664:	d9800017 	ldw	r6,0(sp)
    2668:	1880082e 	bgeu	r3,r2,268c <alt_up_audio_record_l+0x50>
		return 0;
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    266c:	000f883a 	mov	r7,zero
    2670:	880b883a 	mov	r5,r17
    2674:	8009883a 	mov	r4,r16
}
    2678:	dfc00317 	ldw	ra,12(sp)
    267c:	dc400217 	ldw	r17,8(sp)
    2680:	dc000117 	ldw	r16,4(sp)
    2684:	dec00404 	addi	sp,sp,16
{
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
	if (data_words <= BUF_THRESHOLD)
		return 0;
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    2688:	00025cc1 	jmpi	25cc <alt_up_audio_read_fifo>
}
    268c:	0005883a 	mov	r2,zero
    2690:	dfc00317 	ldw	ra,12(sp)
    2694:	dc400217 	ldw	r17,8(sp)
    2698:	dc000117 	ldw	r16,4(sp)
    269c:	dec00404 	addi	sp,sp,16
    26a0:	f800283a 	ret

000026a4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    26a4:	0005883a 	mov	r2,zero
    26a8:	1180110e 	bge	r2,r6,26f0 <alt_up_audio_write_fifo+0x4c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    26ac:	22000a17 	ldw	r8,40(r4)
    26b0:	40c00137 	ldwio	r3,4(r8)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
    26b4:	3800031e 	bne	r7,zero,26c4 <alt_up_audio_write_fifo+0x20>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    26b8:	1806d63a 	srli	r3,r3,24
    26bc:	1800041e 	bne	r3,zero,26d0 <alt_up_audio_write_fifo+0x2c>
    26c0:	f800283a 	ret
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
    26c4:	18c03fec 	andhi	r3,r3,255
		if (fifospace > 0) 
    26c8:	1800041e 	bne	r3,zero,26dc <alt_up_audio_write_fifo+0x38>
    26cc:	f800283a 	ret
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    26d0:	28c00017 	ldw	r3,0(r5)
    26d4:	40c00235 	stwio	r3,8(r8)
    26d8:	00000206 	br	26e4 <alt_up_audio_write_fifo+0x40>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    26dc:	28c00017 	ldw	r3,0(r5)
    26e0:	40c00335 	stwio	r3,12(r8)
    26e4:	10800044 	addi	r2,r2,1
    26e8:	29400104 	addi	r5,r5,4
    26ec:	003fee06 	br	26a8 <alt_up_audio_write_fifo+0x4>
			// no more space to write
			break;
		}
	}
	return count;
}
    26f0:	f800283a 	ret

000026f4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    26f4:	defffc04 	addi	sp,sp,-16
    26f8:	dc400215 	stw	r17,8(sp)
    26fc:	2823883a 	mov	r17,r5
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    2700:	01400044 	movi	r5,1
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    2704:	dc000115 	stw	r16,4(sp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    2708:	d9800015 	stw	r6,0(sp)
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    270c:	dfc00315 	stw	ra,12(sp)
    2710:	2021883a 	mov	r16,r4
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    2714:	00025ac0 	call	25ac <alt_up_audio_write_fifo_space>
	if (space <= BUF_THRESHOLD)
    2718:	00c01804 	movi	r3,96
    271c:	d9800017 	ldw	r6,0(sp)
    2720:	1880082e 	bgeu	r3,r2,2744 <alt_up_audio_play_r+0x50>
		return 0;
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    2724:	01c00044 	movi	r7,1
    2728:	880b883a 	mov	r5,r17
    272c:	8009883a 	mov	r4,r16
}
    2730:	dfc00317 	ldw	ra,12(sp)
    2734:	dc400217 	ldw	r17,8(sp)
    2738:	dc000117 	ldw	r16,4(sp)
    273c:	dec00404 	addi	sp,sp,16
{
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
	if (space <= BUF_THRESHOLD)
		return 0;
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    2740:	00026a41 	jmpi	26a4 <alt_up_audio_write_fifo>
}
    2744:	0005883a 	mov	r2,zero
    2748:	dfc00317 	ldw	ra,12(sp)
    274c:	dc400217 	ldw	r17,8(sp)
    2750:	dc000117 	ldw	r16,4(sp)
    2754:	dec00404 	addi	sp,sp,16
    2758:	f800283a 	ret

0000275c <alt_up_audio_play_l>:
/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    275c:	20800a17 	ldw	r2,40(r4)
    2760:	10800137 	ldwio	r2,4(r2)
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
	if (space <= BUF_THRESHOLD)
    2764:	00c01804 	movi	r3,96
    2768:	1004d63a 	srli	r2,r2,24
    276c:	1880022e 	bgeu	r3,r2,2778 <alt_up_audio_play_l+0x1c>
		return 0;
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    2770:	000f883a 	mov	r7,zero
    2774:	00026a41 	jmpi	26a4 <alt_up_audio_write_fifo>
}
    2778:	0005883a 	mov	r2,zero
    277c:	f800283a 	ret

00002780 <alt_up_audio_read_fifo_head>:
	}
	return count;
}

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    2780:	20800a17 	ldw	r2,40(r4)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    2784:	2800021e 	bne	r5,zero,2790 <alt_up_audio_read_fifo_head+0x10>
    2788:	10800237 	ldwio	r2,8(r2)
    278c:	f800283a 	ret
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
    2790:	10800337 	ldwio	r2,12(r2)
}
    2794:	f800283a 	ret

00002798 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    2798:	20800a17 	ldw	r2,40(r4)
	if (channel == ALT_UP_AUDIO_LEFT) 
    279c:	3000021e 	bne	r6,zero,27a8 <alt_up_audio_write_fifo_head+0x10>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    27a0:	11400235 	stwio	r5,8(r2)
    27a4:	f800283a 	ret
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    27a8:	11400335 	stwio	r5,12(r2)
    27ac:	f800283a 	ret

000027b0 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    27b0:	0005883a 	mov	r2,zero
    27b4:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    27b8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    27bc:	10800804 	addi	r2,r2,32
    27c0:	10fffd1e 	bne	r2,r3,27b8 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    27c4:	f800283a 	ret

000027c8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    27c8:	3005883a 	mov	r2,r6
    27cc:	f800283a 	ret

000027d0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    27d0:	20000226 	beq	r4,zero,27dc <alt_dev_llist_insert+0xc>
    27d4:	20800217 	ldw	r2,8(r4)
    27d8:	1000101e 	bne	r2,zero,281c <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    27dc:	d0a00617 	ldw	r2,-32744(gp)
    27e0:	10000926 	beq	r2,zero,2808 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    27e4:	deffff04 	addi	sp,sp,-4
    27e8:	dfc00015 	stw	ra,0(sp)
    27ec:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    27f0:	00c00584 	movi	r3,22
    27f4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    27f8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    27fc:	dfc00017 	ldw	ra,0(sp)
    2800:	dec00104 	addi	sp,sp,4
    2804:	f800283a 	ret
    2808:	d0a03f04 	addi	r2,gp,-32516
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    280c:	00c00584 	movi	r3,22
    2810:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    2814:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2818:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    281c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2820:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2824:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2828:	28800017 	ldw	r2,0(r5)
    282c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2830:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    2834:	0005883a 	mov	r2,zero
    2838:	f800283a 	ret

0000283c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    283c:	defffb04 	addi	sp,sp,-20
    2840:	dcc00315 	stw	r19,12(sp)
    2844:	dc800215 	stw	r18,8(sp)
    2848:	dc400115 	stw	r17,4(sp)
    284c:	dc000015 	stw	r16,0(sp)
    2850:	dfc00415 	stw	ra,16(sp)
    2854:	2027883a 	mov	r19,r4
    2858:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    285c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2860:	000292c0 	call	292c <strlen>
    2864:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2868:	84400726 	beq	r16,r17,2888 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    286c:	81000217 	ldw	r4,8(r16)
    2870:	900d883a 	mov	r6,r18
    2874:	980b883a 	mov	r5,r19
    2878:	00028fc0 	call	28fc <memcmp>
    287c:	10000426 	beq	r2,zero,2890 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2880:	84000017 	ldw	r16,0(r16)
    2884:	003ff806 	br	2868 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
    2888:	0005883a 	mov	r2,zero
    288c:	00000106 	br	2894 <alt_find_dev+0x58>
    2890:	8005883a 	mov	r2,r16
}
    2894:	dfc00417 	ldw	ra,16(sp)
    2898:	dcc00317 	ldw	r19,12(sp)
    289c:	dc800217 	ldw	r18,8(sp)
    28a0:	dc400117 	ldw	r17,4(sp)
    28a4:	dc000017 	ldw	r16,0(sp)
    28a8:	dec00504 	addi	sp,sp,20
    28ac:	f800283a 	ret

000028b0 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    28b0:	01440004 	movi	r5,4096
    28b4:	0009883a 	mov	r4,zero
    28b8:	00028c41 	jmpi	28c4 <alt_icache_flush>

000028bc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    28bc:	000170fa 	wrctl	ienable,zero
    28c0:	f800283a 	ret

000028c4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    28c4:	00840004 	movi	r2,4096
    28c8:	1140012e 	bgeu	r2,r5,28d0 <alt_icache_flush+0xc>
    28cc:	100b883a 	mov	r5,r2
    28d0:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    28d4:	2005883a 	mov	r2,r4
    28d8:	1140032e 	bgeu	r2,r5,28e8 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    28dc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    28e0:	10800804 	addi	r2,r2,32
    28e4:	003ffc06 	br	28d8 <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    28e8:	210007cc 	andi	r4,r4,31
    28ec:	20000126 	beq	r4,zero,28f4 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    28f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    28f4:	0000203a 	flushp
    28f8:	f800283a 	ret

000028fc <memcmp>:
    28fc:	218d883a 	add	r6,r4,r6
    2900:	21800826 	beq	r4,r6,2924 <memcmp+0x28>
    2904:	20800003 	ldbu	r2,0(r4)
    2908:	28c00003 	ldbu	r3,0(r5)
    290c:	10c00226 	beq	r2,r3,2918 <memcmp+0x1c>
    2910:	10c5c83a 	sub	r2,r2,r3
    2914:	f800283a 	ret
    2918:	21000044 	addi	r4,r4,1
    291c:	29400044 	addi	r5,r5,1
    2920:	003ff706 	br	2900 <memcmp+0x4>
    2924:	0005883a 	mov	r2,zero
    2928:	f800283a 	ret

0000292c <strlen>:
    292c:	2005883a 	mov	r2,r4
    2930:	10c00007 	ldb	r3,0(r2)
    2934:	18000226 	beq	r3,zero,2940 <strlen+0x14>
    2938:	10800044 	addi	r2,r2,1
    293c:	003ffc06 	br	2930 <strlen+0x4>
    2940:	1105c83a 	sub	r2,r2,r4
    2944:	f800283a 	ret
