
audio2.elf:     file format elf32-littlenios2
audio2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000610 memsz 0x00000610 flags r-x
    LOAD off    0x00001630 vaddr 0x00004630 paddr 0x000047fc align 2**12
         filesz 0x000001cc memsz 0x000001cc flags rw-
    LOAD off    0x000019c8 vaddr 0x000049c8 paddr 0x000049c8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000017fc  2**0
                  CONTENTS
  2 .text         000005ac  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  000045cc  000045cc  000015cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001cc  00004630  000047fc  00001630  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000049c8  000049c8  000019c8  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000049d8  000049d8  000017fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000280  00000000  00000000  00001820  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003172  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000011c9  00000000  00000000  00004c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001375  00000000  00000000  00005ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000328  00000000  00000000  00007150  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000100a  00000000  00000000  00007478  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000577  00000000  00000000  00008482  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000089fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00008a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009c8e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00009c91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00009c96  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00009c97  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00009c98  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00009c9c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00009ca0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00009ca4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  00009caf  2**0
                  CONTENTS, READONLY
 26 .jdi          000046c0  00000000  00000000  00009cd2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000793d3  00000000  00000000  0000e392  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
000045cc l    d  .rodata	00000000 .rodata
00004630 l    d  .rwdata	00000000 .rwdata
000049c8 l    d  .bss	00000000 .bss
000049d8 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../audio2_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00004630 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004740 l     O .rwdata	00000030 AUDIOCONFIG
00004710 l     O .rwdata	00000030 AUDIO
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000454c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0000442c g     F .text	0000002c alt_main
0000418c g     F .text	00000080 _puts_r
000047fc g       *ABS*	00000000 __flash_rwdata_start
000045c4 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000049c8 g     O .bss	00000004 errno
000049d0 g     O .bss	00000004 alt_argv
0000c7c8 g       *ABS*	00000000 _gp
00004770 g     O .rwdata	00000030 alt_fd_list
0000420c g     F .text	00000014 puts
0000405c g     F .text	0000001c init_audio
000047c8 g     O .rwdata	00000004 audio_right_ptr
000047e4 g     O .rwdata	00000004 alt_max_fd
00004078 g     F .text	00000010 get_fifo_space
000047d8 g     O .rwdata	00000004 _global_impure_ptr
000049d8 g       *ABS*	00000000 __bss_end
000047a0 g     O .rwdata	00000028 alt_dev_null
00004548 g     F .text	00000004 alt_dcache_flush_all
000047fc g       *ABS*	00000000 __ram_rwdata_end
000047e8 g     O .rwdata	00000008 alt_dev_list
00004458 g     F .text	00000060 write
00004630 g       *ABS*	00000000 __ram_rodata_end
000049d8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004514 g     F .text	00000034 altera_avalon_jtag_uart_write
00004020 g     F .text	0000003c _start
000044d8 g     F .text	0000003c alt_sys_init
00004164 g     F .text	00000028 .hidden __mulsi3
00004630 g       *ABS*	00000000 __ram_rwdata_start
000045cc g       *ABS*	00000000 __ram_rodata_start
000049d8 g       *ABS*	00000000 __alt_stack_base
00004554 g     F .text	0000006c alt_dev_llist_insert
0000423c g     F .text	000000b8 __sfvwrite_small_dev
000049c8 g       *ABS*	00000000 __bss_start
000040cc g     F .text	00000098 main
00004000 g       *ABS*	00000000 __alt_mem_RAM
000049cc g     O .bss	00000004 alt_envp
000047e0 g     O .rwdata	00000004 JTAG
000047f8 g     O .rwdata	00000004 alt_errno
000045cc g       *ABS*	00000000 __flash_rodata_start
000047cc g     O .rwdata	00000004 audio_left_ptr
000044b8 g     F .text	00000020 alt_irq_init
000047d0 g     O .rwdata	00000004 audio_fifospace_ptr
000042f4 g     F .text	00000058 _write_r
000047d4 g     O .rwdata	00000004 audio_control_ptr
000047dc g     O .rwdata	00000004 _impure_ptr
000049d4 g     O .bss	00000004 alt_argc
000047f0 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000047fc g       *ABS*	00000000 _edata
000049d8 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004220 g     F .text	0000001c strlen
000045c0 g     F .text	00000004 alt_icache_flush_all
00004088 g     F .text	00000044 write_audio_sample
0000434c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b1f214 	ori	gp,gp,51144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10927214 	ori	r2,r2,18888

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d27614 	ori	r3,r3,18904

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	000434c0 	call	434c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	000442c0 	call	442c <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <init_audio>:
volatile unsigned int *audio_left_ptr = (unsigned int *) AUDIO_LEFT_DATA;
volatile unsigned int *audio_right_ptr = (unsigned int *) AUDIO_RIGHT_DATA;

void init_audio() {
    // Reset del controlador de audio
    *audio_control_ptr = 0x8;  // Clear FIFOs
    405c:	d0a00317 	ldw	r2,-32756(gp)
    4060:	00c00204 	movi	r3,8
    *audio_control_ptr = 0x0;  // Normal operation
    printf("Audio inicializado\n");
    4064:	01000034 	movhi	r4,0
volatile unsigned int *audio_left_ptr = (unsigned int *) AUDIO_LEFT_DATA;
volatile unsigned int *audio_right_ptr = (unsigned int *) AUDIO_RIGHT_DATA;

void init_audio() {
    // Reset del controlador de audio
    *audio_control_ptr = 0x8;  // Clear FIFOs
    4068:	10c00015 	stw	r3,0(r2)
    *audio_control_ptr = 0x0;  // Normal operation
    printf("Audio inicializado\n");
    406c:	21117304 	addi	r4,r4,17868
volatile unsigned int *audio_right_ptr = (unsigned int *) AUDIO_RIGHT_DATA;

void init_audio() {
    // Reset del controlador de audio
    *audio_control_ptr = 0x8;  // Clear FIFOs
    *audio_control_ptr = 0x0;  // Normal operation
    4070:	10000015 	stw	zero,0(r2)
    printf("Audio inicializado\n");
    4074:	000420c1 	jmpi	420c <puts>

00004078 <get_fifo_space>:
}

int get_fifo_space() {
    // Retorna el espacio disponible en el FIFO izquierdo
    return (*audio_fifospace_ptr >> 24) & 0xFF;
    4078:	d0a00217 	ldw	r2,-32760(gp)
    407c:	10800017 	ldw	r2,0(r2)
}
    4080:	1004d63a 	srli	r2,r2,24
    4084:	f800283a 	ret

00004088 <write_audio_sample>:

void write_audio_sample(int sample) {
    4088:	defffe04 	addi	sp,sp,-8
    408c:	dc000015 	stw	r16,0(sp)
    4090:	dfc00115 	stw	ra,4(sp)
    4094:	2021883a 	mov	r16,r4
    // Esperar hasta que haya espacio en el FIFO
    while (get_fifo_space() == 0) {
    4098:	00040780 	call	4078 <get_fifo_space>
    409c:	103ffe26 	beq	r2,zero,4098 <write_audio_sample+0x10>
        // Esperar
    }

    // Convertir muestra a formato unsigned de 24 bits
    unsigned int audio_sample = (unsigned int)(sample & 0xFFFFFF);
    40a0:	00804034 	movhi	r2,256
    40a4:	10bfffc4 	addi	r2,r2,-1
    40a8:	8088703a 	and	r4,r16,r2

    // Escribir a ambos canales
    *audio_left_ptr = audio_sample;
    40ac:	d0a00117 	ldw	r2,-32764(gp)
    40b0:	11000015 	stw	r4,0(r2)
    *audio_right_ptr = audio_sample;
    40b4:	d0a00017 	ldw	r2,-32768(gp)
    40b8:	11000015 	stw	r4,0(r2)
}
    40bc:	dfc00117 	ldw	ra,4(sp)
    40c0:	dc000017 	ldw	r16,0(sp)
    40c4:	dec00204 	addi	sp,sp,8
    40c8:	f800283a 	ret

000040cc <main>:

int main() {
    int phase = 0;
    int sample;

    printf("Iniciando generador de audio...\n");
    40cc:	01000034 	movhi	r4,0
    // Escribir a ambos canales
    *audio_left_ptr = audio_sample;
    *audio_right_ptr = audio_sample;
}

int main() {
    40d0:	defffa04 	addi	sp,sp,-24
    int phase = 0;
    int sample;

    printf("Iniciando generador de audio...\n");
    40d4:	21117804 	addi	r4,r4,17888
    // Escribir a ambos canales
    *audio_left_ptr = audio_sample;
    *audio_right_ptr = audio_sample;
}

int main() {
    40d8:	dfc00515 	stw	ra,20(sp)
    40dc:	dd000415 	stw	r20,16(sp)
    40e0:	dcc00315 	stw	r19,12(sp)
    40e4:	dc800215 	stw	r18,8(sp)
    40e8:	dc400115 	stw	r17,4(sp)
    40ec:	dc000015 	stw	r16,0(sp)
    int phase = 0;
    int sample;

    printf("Iniciando generador de audio...\n");
    40f0:	000420c0 	call	420c <puts>

    // Inicializar audio
    init_audio();
    40f4:	000405c0 	call	405c <init_audio>
    *audio_left_ptr = audio_sample;
    *audio_right_ptr = audio_sample;
}

int main() {
    int phase = 0;
    40f8:	0029883a 	mov	r20,zero
    // Inicializar audio
    init_audio();

    while (1) {
        // Generar onda triangular
        if (phase < AMPLITUDE/2) {
    40fc:	0404e1c4 	movi	r16,4999
            sample = phase * 4;
        } else if (phase < AMPLITUDE) {
    4100:	0449c3c4 	movi	r17,9999
            sample = AMPLITUDE*2 - (phase * 4);
        } else if (phase < AMPLITUDE*3/2) {
    4104:	048ea5c4 	movi	r18,14999
            sample = -(phase - AMPLITUDE) * 4;
        } else {
            sample = -(AMPLITUDE*2 - (phase - AMPLITUDE) * 4);
    4108:	04cea604 	movi	r19,15000
    // Inicializar audio
    init_audio();

    while (1) {
        // Generar onda triangular
        if (phase < AMPLITUDE/2) {
    410c:	85000216 	blt	r16,r20,4118 <main+0x4c>
            sample = phase * 4;
    4110:	a505883a 	add	r2,r20,r20
    4114:	00000406 	br	4128 <main+0x5c>
        } else if (phase < AMPLITUDE) {
    4118:	8d000516 	blt	r17,r20,4130 <main+0x64>
            sample = AMPLITUDE*2 - (phase * 4);
    411c:	0084e204 	movi	r2,5000
    4120:	1505c83a 	sub	r2,r2,r20
    4124:	1085883a 	add	r2,r2,r2
    4128:	1085883a 	add	r2,r2,r2
    412c:	00000606 	br	4148 <main+0x7c>
        } else if (phase < AMPLITUDE*3/2) {
    4130:	95000216 	blt	r18,r20,413c <main+0x70>
            sample = -(phase - AMPLITUDE) * 4;
    4134:	0089c404 	movi	r2,10000
    4138:	003ff906 	br	4120 <main+0x54>
        } else {
            sample = -(AMPLITUDE*2 - (phase - AMPLITUDE) * 4);
    413c:	017fff04 	movi	r5,-4
    4140:	9d09c83a 	sub	r4,r19,r20
    4144:	00041640 	call	4164 <__mulsi3>
        }

        // Incrementar fase
        phase += 200;
    4148:	a5003204 	addi	r20,r20,200
        if (phase >= AMPLITUDE*2) {
    414c:	00d387c4 	movi	r3,19999
    4150:	1d00010e 	bge	r3,r20,4158 <main+0x8c>
            phase = 0;
    4154:	0029883a 	mov	r20,zero
        }

        // Escribir muestra al audio
        write_audio_sample(sample);
    4158:	1009883a 	mov	r4,r2
    415c:	00040880 	call	4088 <write_audio_sample>
    }
    4160:	003fea06 	br	410c <main+0x40>

00004164 <__mulsi3>:
    4164:	0005883a 	mov	r2,zero
    4168:	20000726 	beq	r4,zero,4188 <__mulsi3+0x24>
    416c:	20c0004c 	andi	r3,r4,1
    4170:	2008d07a 	srli	r4,r4,1
    4174:	18000126 	beq	r3,zero,417c <__mulsi3+0x18>
    4178:	1145883a 	add	r2,r2,r5
    417c:	294b883a 	add	r5,r5,r5
    4180:	203ffa1e 	bne	r4,zero,416c <__mulsi3+0x8>
    4184:	f800283a 	ret
    4188:	f800283a 	ret

0000418c <_puts_r>:
    418c:	defffd04 	addi	sp,sp,-12
    4190:	dc000015 	stw	r16,0(sp)
    4194:	2021883a 	mov	r16,r4
    4198:	2809883a 	mov	r4,r5
    419c:	dfc00215 	stw	ra,8(sp)
    41a0:	dc400115 	stw	r17,4(sp)
    41a4:	2823883a 	mov	r17,r5
    41a8:	00042200 	call	4220 <strlen>
    41ac:	81400217 	ldw	r5,8(r16)
    41b0:	01000034 	movhi	r4,0
    41b4:	21108f04 	addi	r4,r4,16956
    41b8:	29000115 	stw	r4,4(r5)
    41bc:	100f883a 	mov	r7,r2
    41c0:	880d883a 	mov	r6,r17
    41c4:	8009883a 	mov	r4,r16
    41c8:	000423c0 	call	423c <__sfvwrite_small_dev>
    41cc:	00ffffc4 	movi	r3,-1
    41d0:	10c00926 	beq	r2,r3,41f8 <_puts_r+0x6c>
    41d4:	81400217 	ldw	r5,8(r16)
    41d8:	01800034 	movhi	r6,0
    41dc:	01c00044 	movi	r7,1
    41e0:	28800117 	ldw	r2,4(r5)
    41e4:	31918004 	addi	r6,r6,17920
    41e8:	8009883a 	mov	r4,r16
    41ec:	103ee83a 	callr	r2
    41f0:	10bfffe0 	cmpeqi	r2,r2,-1
    41f4:	0085c83a 	sub	r2,zero,r2
    41f8:	dfc00217 	ldw	ra,8(sp)
    41fc:	dc400117 	ldw	r17,4(sp)
    4200:	dc000017 	ldw	r16,0(sp)
    4204:	dec00304 	addi	sp,sp,12
    4208:	f800283a 	ret

0000420c <puts>:
    420c:	00800034 	movhi	r2,0
    4210:	1091f704 	addi	r2,r2,18396
    4214:	200b883a 	mov	r5,r4
    4218:	11000017 	ldw	r4,0(r2)
    421c:	000418c1 	jmpi	418c <_puts_r>

00004220 <strlen>:
    4220:	2005883a 	mov	r2,r4
    4224:	10c00007 	ldb	r3,0(r2)
    4228:	18000226 	beq	r3,zero,4234 <strlen+0x14>
    422c:	10800044 	addi	r2,r2,1
    4230:	003ffc06 	br	4224 <strlen+0x4>
    4234:	1105c83a 	sub	r2,r2,r4
    4238:	f800283a 	ret

0000423c <__sfvwrite_small_dev>:
    423c:	2880000b 	ldhu	r2,0(r5)
    4240:	1080020c 	andi	r2,r2,8
    4244:	10002126 	beq	r2,zero,42cc <__sfvwrite_small_dev+0x90>
    4248:	2880008f 	ldh	r2,2(r5)
    424c:	defffa04 	addi	sp,sp,-24
    4250:	dc000015 	stw	r16,0(sp)
    4254:	dfc00515 	stw	ra,20(sp)
    4258:	dd000415 	stw	r20,16(sp)
    425c:	dcc00315 	stw	r19,12(sp)
    4260:	dc800215 	stw	r18,8(sp)
    4264:	dc400115 	stw	r17,4(sp)
    4268:	2821883a 	mov	r16,r5
    426c:	10001216 	blt	r2,zero,42b8 <__sfvwrite_small_dev+0x7c>
    4270:	2027883a 	mov	r19,r4
    4274:	3025883a 	mov	r18,r6
    4278:	3823883a 	mov	r17,r7
    427c:	05010004 	movi	r20,1024
    4280:	04400b0e 	bge	zero,r17,42b0 <__sfvwrite_small_dev+0x74>
    4284:	880f883a 	mov	r7,r17
    4288:	a440010e 	bge	r20,r17,4290 <__sfvwrite_small_dev+0x54>
    428c:	01c10004 	movi	r7,1024
    4290:	8140008f 	ldh	r5,2(r16)
    4294:	900d883a 	mov	r6,r18
    4298:	9809883a 	mov	r4,r19
    429c:	00042f40 	call	42f4 <_write_r>
    42a0:	0080050e 	bge	zero,r2,42b8 <__sfvwrite_small_dev+0x7c>
    42a4:	88a3c83a 	sub	r17,r17,r2
    42a8:	90a5883a 	add	r18,r18,r2
    42ac:	003ff406 	br	4280 <__sfvwrite_small_dev+0x44>
    42b0:	0005883a 	mov	r2,zero
    42b4:	00000706 	br	42d4 <__sfvwrite_small_dev+0x98>
    42b8:	8080000b 	ldhu	r2,0(r16)
    42bc:	10801014 	ori	r2,r2,64
    42c0:	8080000d 	sth	r2,0(r16)
    42c4:	00bfffc4 	movi	r2,-1
    42c8:	00000206 	br	42d4 <__sfvwrite_small_dev+0x98>
    42cc:	00bfffc4 	movi	r2,-1
    42d0:	f800283a 	ret
    42d4:	dfc00517 	ldw	ra,20(sp)
    42d8:	dd000417 	ldw	r20,16(sp)
    42dc:	dcc00317 	ldw	r19,12(sp)
    42e0:	dc800217 	ldw	r18,8(sp)
    42e4:	dc400117 	ldw	r17,4(sp)
    42e8:	dc000017 	ldw	r16,0(sp)
    42ec:	dec00604 	addi	sp,sp,24
    42f0:	f800283a 	ret

000042f4 <_write_r>:
    42f4:	defffd04 	addi	sp,sp,-12
    42f8:	dc000015 	stw	r16,0(sp)
    42fc:	04000034 	movhi	r16,0
    4300:	dc400115 	stw	r17,4(sp)
    4304:	84127204 	addi	r16,r16,18888
    4308:	2023883a 	mov	r17,r4
    430c:	2809883a 	mov	r4,r5
    4310:	300b883a 	mov	r5,r6
    4314:	380d883a 	mov	r6,r7
    4318:	dfc00215 	stw	ra,8(sp)
    431c:	80000015 	stw	zero,0(r16)
    4320:	00044580 	call	4458 <write>
    4324:	00ffffc4 	movi	r3,-1
    4328:	10c0031e 	bne	r2,r3,4338 <_write_r+0x44>
    432c:	80c00017 	ldw	r3,0(r16)
    4330:	18000126 	beq	r3,zero,4338 <_write_r+0x44>
    4334:	88c00015 	stw	r3,0(r17)
    4338:	dfc00217 	ldw	ra,8(sp)
    433c:	dc400117 	ldw	r17,4(sp)
    4340:	dc000017 	ldw	r16,0(sp)
    4344:	dec00304 	addi	sp,sp,12
    4348:	f800283a 	ret

0000434c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    434c:	deffff04 	addi	sp,sp,-4
    4350:	01000034 	movhi	r4,0
    4354:	01400034 	movhi	r5,0
    4358:	dfc00015 	stw	ra,0(sp)
    435c:	21118c04 	addi	r4,r4,17968
    4360:	2951ff04 	addi	r5,r5,18428

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4364:	2140061e 	bne	r4,r5,4380 <alt_load+0x34>
    4368:	01000034 	movhi	r4,0
    436c:	01400034 	movhi	r5,0
    4370:	21100804 	addi	r4,r4,16416
    4374:	29500804 	addi	r5,r5,16416
    4378:	2140121e 	bne	r4,r5,43c4 <alt_load+0x78>
    437c:	00000b06 	br	43ac <alt_load+0x60>
    4380:	00c00034 	movhi	r3,0
    4384:	18d1ff04 	addi	r3,r3,18428
    4388:	1907c83a 	sub	r3,r3,r4
    438c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4390:	10fff526 	beq	r2,r3,4368 <alt_load+0x1c>
    {
      *to++ = *from++;
    4394:	114f883a 	add	r7,r2,r5
    4398:	39c00017 	ldw	r7,0(r7)
    439c:	110d883a 	add	r6,r2,r4
    43a0:	10800104 	addi	r2,r2,4
    43a4:	31c00015 	stw	r7,0(r6)
    43a8:	003ff906 	br	4390 <alt_load+0x44>
    43ac:	01000034 	movhi	r4,0
    43b0:	01400034 	movhi	r5,0
    43b4:	21117304 	addi	r4,r4,17868
    43b8:	29517304 	addi	r5,r5,17868

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    43bc:	2140101e 	bne	r4,r5,4400 <alt_load+0xb4>
    43c0:	00000b06 	br	43f0 <alt_load+0xa4>
    43c4:	00c00034 	movhi	r3,0
    43c8:	18d00804 	addi	r3,r3,16416
    43cc:	1907c83a 	sub	r3,r3,r4
    43d0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    43d4:	10fff526 	beq	r2,r3,43ac <alt_load+0x60>
    {
      *to++ = *from++;
    43d8:	114f883a 	add	r7,r2,r5
    43dc:	39c00017 	ldw	r7,0(r7)
    43e0:	110d883a 	add	r6,r2,r4
    43e4:	10800104 	addi	r2,r2,4
    43e8:	31c00015 	stw	r7,0(r6)
    43ec:	003ff906 	br	43d4 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    43f0:	00045480 	call	4548 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    43f4:	dfc00017 	ldw	ra,0(sp)
    43f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    43fc:	00045c01 	jmpi	45c0 <alt_icache_flush_all>
    4400:	00c00034 	movhi	r3,0
    4404:	18d18c04 	addi	r3,r3,17968
    4408:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    440c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4410:	18bff726 	beq	r3,r2,43f0 <alt_load+0xa4>
    {
      *to++ = *from++;
    4414:	114f883a 	add	r7,r2,r5
    4418:	39c00017 	ldw	r7,0(r7)
    441c:	110d883a 	add	r6,r2,r4
    4420:	10800104 	addi	r2,r2,4
    4424:	31c00015 	stw	r7,0(r6)
    4428:	003ff906 	br	4410 <alt_load+0xc4>

0000442c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    442c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4430:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4434:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4438:	00044b80 	call	44b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    443c:	00044d80 	call	44d8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4440:	d1a08117 	ldw	r6,-32252(gp)
    4444:	d1608217 	ldw	r5,-32248(gp)
    4448:	d1208317 	ldw	r4,-32244(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    444c:	dfc00017 	ldw	ra,0(sp)
    4450:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4454:	00040cc1 	jmpi	40cc <main>

00004458 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    4458:	00800044 	movi	r2,1
    445c:	20800226 	beq	r4,r2,4468 <write+0x10>
    4460:	00800084 	movi	r2,2
    4464:	2080041e 	bne	r4,r2,4478 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    4468:	01000034 	movhi	r4,0
    446c:	000f883a 	mov	r7,zero
    4470:	2111f804 	addi	r4,r4,18400
    4474:	00045141 	jmpi	4514 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4478:	d0a00c17 	ldw	r2,-32720(gp)
    447c:	10000926 	beq	r2,zero,44a4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4480:	deffff04 	addi	sp,sp,-4
    4484:	dfc00015 	stw	ra,0(sp)
    4488:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    448c:	00c01444 	movi	r3,81
    4490:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    4494:	00bfffc4 	movi	r2,-1
    4498:	dfc00017 	ldw	ra,0(sp)
    449c:	dec00104 	addi	sp,sp,4
    44a0:	f800283a 	ret
    44a4:	d0a08004 	addi	r2,gp,-32256
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    44a8:	00c01444 	movi	r3,81
    44ac:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    44b0:	00bfffc4 	movi	r2,-1
    44b4:	f800283a 	ret

000044b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    44b8:	deffff04 	addi	sp,sp,-4
    44bc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    44c0:	00045c40 	call	45c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    44c4:	00800044 	movi	r2,1
    44c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    44cc:	dfc00017 	ldw	ra,0(sp)
    44d0:	dec00104 	addi	sp,sp,4
    44d4:	f800283a 	ret

000044d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    44d8:	defffe04 	addi	sp,sp,-8
    44dc:	dc000015 	stw	r16,0(sp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    44e0:	01000034 	movhi	r4,0
    44e4:	d4200804 	addi	r16,gp,-32736
    44e8:	800b883a 	mov	r5,r16
    44ec:	2111d004 	addi	r4,r4,18240
    44f0:	dfc00115 	stw	ra,4(sp)
    44f4:	00045540 	call	4554 <alt_dev_llist_insert>
    44f8:	01000034 	movhi	r4,0
    44fc:	800b883a 	mov	r5,r16
    4500:	2111c404 	addi	r4,r4,18192
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIOCONFIG, AUDIOCONFIG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, AUDIO);
}
    4504:	dfc00117 	ldw	ra,4(sp)
    4508:	dc000017 	ldw	r16,0(sp)
    450c:	dec00204 	addi	sp,sp,8
    4510:	00045541 	jmpi	4554 <alt_dev_llist_insert>

00004514 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    4514:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4518:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    451c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4520:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4524:	2980072e 	bgeu	r5,r6,4544 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4528:	38c00037 	ldwio	r3,0(r7)
    452c:	18ffffec 	andhi	r3,r3,65535
    4530:	183ffc26 	beq	r3,zero,4524 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4534:	28c00007 	ldb	r3,0(r5)
    4538:	20c00035 	stwio	r3,0(r4)
    453c:	29400044 	addi	r5,r5,1
    4540:	003ff806 	br	4524 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    4544:	f800283a 	ret

00004548 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4548:	f800283a 	ret

0000454c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    454c:	3005883a 	mov	r2,r6
    4550:	f800283a 	ret

00004554 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4554:	20000226 	beq	r4,zero,4560 <alt_dev_llist_insert+0xc>
    4558:	20800217 	ldw	r2,8(r4)
    455c:	1000101e 	bne	r2,zero,45a0 <alt_dev_llist_insert+0x4c>
    4560:	d0a00c17 	ldw	r2,-32720(gp)
    4564:	10000926 	beq	r2,zero,458c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4568:	deffff04 	addi	sp,sp,-4
    456c:	dfc00015 	stw	ra,0(sp)
    4570:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    4574:	00c00584 	movi	r3,22
    4578:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    457c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    4580:	dfc00017 	ldw	ra,0(sp)
    4584:	dec00104 	addi	sp,sp,4
    4588:	f800283a 	ret
    458c:	d0a08004 	addi	r2,gp,-32256
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    4590:	00c00584 	movi	r3,22
    4594:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    4598:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    459c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    45a0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    45a4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    45a8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    45ac:	28800017 	ldw	r2,0(r5)
    45b0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    45b4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    45b8:	0005883a 	mov	r2,zero
    45bc:	f800283a 	ret

000045c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    45c0:	f800283a 	ret

000045c4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    45c4:	000170fa 	wrctl	ienable,zero
    45c8:	f800283a 	ret
